// SPDX-License-Identifier: LGPL-2.1-or-later
// See Notices.txt for copyright information
use super::*;

use ExceptionHandlingMode::*;
use RoundingMode::*;
use TininessDetectionMode::*;
const OVERFLOW: StatusFlags = StatusFlags::OVERFLOW;
const UNDERFLOW: StatusFlags = StatusFlags::UNDERFLOW;
const INEXACT: StatusFlags = StatusFlags::INEXACT;

fn test_case(
    mantissa: i32,
    exponent: i32,
    rounding_mode: RoundingMode,
    exception_handling_mode: ExceptionHandlingMode,
    tininess_detection_mode: TininessDetectionMode,
    expected_float: u16,
    expected_status_flags: StatusFlags,
) {
    println!(
        "value: {}{:#X}*2^{}",
        if mantissa < 0 { "-" } else { "" },
        mantissa.abs(),
        exponent
    );
    println!("rounding_mode: {:?}", rounding_mode);
    println!("exception_handling_mode: {:?}", exception_handling_mode);
    println!("tininess_detection_mode: {:?}", tininess_detection_mode);
    let value = if exponent.is_negative() {
        RealAlgebraicNumber::from(Ratio::new(
            BigInt::from(mantissa),
            BigInt::one() << (-exponent) as usize,
        ))
    } else {
        RealAlgebraicNumber::from(BigInt::from(mantissa) << exponent as usize)
    };
    let expected_float = F16::from_bits(expected_float);
    println!("expected_float: {:?}", expected_float);
    println!("expected_status_flags: {:?}", expected_status_flags);
    let mut fp_state = FPState {
        rounding_mode,
        exception_handling_mode,
        tininess_detection_mode,
        ..FPState::default()
    };
    let float = F16::from_real_algebraic_number(&value, None, Some(&mut fp_state));
    println!("float: {:?}", float);
    println!("status_flags: {:?}", fp_state.status_flags);
    assert!(expected_float.bits() == float.bits());
    assert!(expected_status_flags == fp_state.status_flags);
}

#[test]
#[rustfmt::skip]
fn test_from_real_algebraic_number_ties_to_even() {
    // test the values right around zero for TiesToEven DefaultIgnoreExactUnderflow BeforeRounding
    test_case(-0x20, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8002, StatusFlags::empty());
    test_case(-0x1C, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x18, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x14, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x10, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8001, StatusFlags::empty());
    test_case(-0xC, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x8, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(-0x4, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(0x0, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0000, StatusFlags::empty());
    test_case(0x4, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0x8, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0xC, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x10, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0001, StatusFlags::empty());
    test_case(0x14, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x18, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x1C, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x20, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0002, StatusFlags::empty());

    // test the values at the transition between subnormal and normal for TiesToEven DefaultIgnoreExactUnderflow BeforeRounding
    test_case(0x3FE0, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FE, StatusFlags::empty());
    test_case(0x3FE2, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE4, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE6, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE8, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEA, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEC, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEE, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF0, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, StatusFlags::empty());
    test_case(0x3FF2, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF4, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF6, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF8, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFA, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFC, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFE, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x4000, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, StatusFlags::empty());
    test_case(0x4002, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4004, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4006, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4008, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x400A, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x400C, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x400E, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4010, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, StatusFlags::empty());
    test_case(0x4012, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4014, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4016, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4018, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x401A, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x401C, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x401E, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x4020, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0402, StatusFlags::empty());
    test_case(-0x4020, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8402, StatusFlags::empty());
    test_case(-0x401E, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x401C, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x401A, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x4018, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x4016, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4014, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4012, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4010, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, StatusFlags::empty());
    test_case(-0x400E, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x400C, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x400A, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4008, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4006, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4004, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4002, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4000, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, StatusFlags::empty());
    test_case(-0x3FFE, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FFC, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FFA, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF8, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF6, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF4, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF2, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF0, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, StatusFlags::empty());
    test_case(-0x3FEE, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FEC, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FEA, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE8, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE6, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE4, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE2, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE0, -28, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FE, StatusFlags::empty());

    // test the values right around zero for TiesToEven DefaultSignalExactUnderflow BeforeRounding
    test_case(-0x20, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8002, UNDERFLOW);
    test_case(-0x1C, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x18, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x14, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x10, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8001, UNDERFLOW);
    test_case(-0xC, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x8, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(-0x4, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(0x0, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0000, StatusFlags::empty());
    test_case(0x4, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0x8, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0xC, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x10, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0001, UNDERFLOW);
    test_case(0x14, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x18, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x1C, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x20, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0002, UNDERFLOW);

    // test the values at the transition between subnormal and normal for TiesToEven DefaultSignalExactUnderflow BeforeRounding
    test_case(0x3FE0, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x03FE, UNDERFLOW);
    test_case(0x3FE2, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE4, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE6, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE8, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEA, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEC, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEE, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF0, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, UNDERFLOW);
    test_case(0x3FF2, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF4, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF6, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF8, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFA, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFC, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFE, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x4000, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, StatusFlags::empty());
    test_case(0x4002, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4004, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4006, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4008, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x400A, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x400C, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x400E, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4010, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, StatusFlags::empty());
    test_case(0x4012, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4014, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4016, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4018, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x401A, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x401C, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x401E, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x4020, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x0402, StatusFlags::empty());
    test_case(-0x4020, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8402, StatusFlags::empty());
    test_case(-0x401E, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x401C, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x401A, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x4018, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x4016, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4014, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4012, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4010, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, StatusFlags::empty());
    test_case(-0x400E, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x400C, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x400A, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4008, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4006, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4004, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4002, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4000, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, StatusFlags::empty());
    test_case(-0x3FFE, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FFC, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FFA, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF8, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF6, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF4, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF2, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF0, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, UNDERFLOW);
    test_case(-0x3FEE, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FEC, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FEA, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE8, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE6, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE4, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE2, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE0, -28, TiesToEven, DefaultSignalExactUnderflow, BeforeRounding, 0x83FE, UNDERFLOW);

    // test the values right around zero for TiesToEven DefaultIgnoreExactUnderflow AfterRounding
    test_case(-0x20, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8002, StatusFlags::empty());
    test_case(-0x1C, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x18, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x14, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x10, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8001, StatusFlags::empty());
    test_case(-0xC, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x8, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(-0x4, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(0x0, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0000, StatusFlags::empty());
    test_case(0x4, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0x8, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0xC, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x10, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0001, StatusFlags::empty());
    test_case(0x14, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x18, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x1C, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x20, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0002, StatusFlags::empty());

    // test the values at the transition between subnormal and normal for TiesToEven DefaultIgnoreExactUnderflow AfterRounding
    test_case(0x3FE0, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FE, StatusFlags::empty());
    test_case(0x3FE2, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE4, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE6, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE8, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEA, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEC, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEE, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF0, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, StatusFlags::empty());
    test_case(0x3FF2, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF4, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF6, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF8, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFA, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFC, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x3FFE, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4000, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, StatusFlags::empty());
    test_case(0x4002, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4004, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4006, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4008, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x400A, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x400C, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x400E, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4010, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, StatusFlags::empty());
    test_case(0x4012, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4014, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4016, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4018, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x401A, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x401C, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x401E, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x4020, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x0402, StatusFlags::empty());
    test_case(-0x4020, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8402, StatusFlags::empty());
    test_case(-0x401E, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x401C, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x401A, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x4018, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x4016, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4014, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4012, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4010, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, StatusFlags::empty());
    test_case(-0x400E, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x400C, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x400A, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4008, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4006, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4004, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4002, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4000, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, StatusFlags::empty());
    test_case(-0x3FFE, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x3FFC, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x3FFA, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF8, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF6, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF4, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF2, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF0, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, StatusFlags::empty());
    test_case(-0x3FEE, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FEC, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FEA, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE8, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE6, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE4, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE2, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE0, -28, TiesToEven, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FE, StatusFlags::empty());

    // test the values right around zero for TiesToEven DefaultSignalExactUnderflow AfterRounding
    test_case(-0x20, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8002, UNDERFLOW);
    test_case(-0x1C, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x18, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x14, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x10, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8001, UNDERFLOW);
    test_case(-0xC, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x8, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(-0x4, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(0x0, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0000, StatusFlags::empty());
    test_case(0x4, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0x8, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0xC, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x10, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0001, UNDERFLOW);
    test_case(0x14, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x18, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x1C, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x20, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0002, UNDERFLOW);

    // test the values at the transition between subnormal and normal for TiesToEven DefaultSignalExactUnderflow AfterRounding
    test_case(0x3FE0, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x03FE, UNDERFLOW);
    test_case(0x3FE2, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE4, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE6, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE8, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEA, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEC, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEE, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF0, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, UNDERFLOW);
    test_case(0x3FF2, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF4, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF6, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF8, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFA, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFC, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x3FFE, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4000, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0400, StatusFlags::empty());
    test_case(0x4002, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4004, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4006, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4008, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x400A, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x400C, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x400E, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4010, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0401, StatusFlags::empty());
    test_case(0x4012, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4014, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4016, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4018, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x401A, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x401C, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x401E, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x4020, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x0402, StatusFlags::empty());
    test_case(-0x4020, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8402, StatusFlags::empty());
    test_case(-0x401E, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x401C, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x401A, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x4018, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x4016, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4014, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4012, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4010, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8401, StatusFlags::empty());
    test_case(-0x400E, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x400C, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x400A, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4008, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4006, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4004, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4002, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4000, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8400, StatusFlags::empty());
    test_case(-0x3FFE, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x3FFC, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x3FFA, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF8, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF6, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF4, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF2, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF0, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, UNDERFLOW);
    test_case(-0x3FEE, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FEC, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FEA, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE8, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE6, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE4, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE2, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE0, -28, TiesToEven, DefaultSignalExactUnderflow, AfterRounding, 0x83FE, UNDERFLOW);

    // test the values right around 1 and -1 for TiesToEven
    test_case(-0x4020, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC02, StatusFlags::empty());
    test_case(-0x401C, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC02, INEXACT);
    test_case(-0x4018, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC02, INEXACT);
    test_case(-0x4014, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC01, INEXACT);
    test_case(-0x4010, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC01, StatusFlags::empty());
    test_case(-0x400C, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC01, INEXACT);
    test_case(-0x4008, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC00, INEXACT);
    test_case(-0x4004, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC00, INEXACT);
    test_case(-0x4000, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC00, StatusFlags::empty());
    test_case(-0x3FFC, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC00, INEXACT);
    test_case(-0x3FF8, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFF, StatusFlags::empty());
    test_case(-0x3FF4, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFE, INEXACT);
    test_case(-0x3FF0, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFE, StatusFlags::empty());
    test_case(-0x3FEC, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFE, INEXACT);
    test_case(-0x3FE8, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFD, StatusFlags::empty());
    test_case(-0x3FE4, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFC, INEXACT);
    test_case(-0x3FE0, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFC, StatusFlags::empty());
    test_case(0x3FE0, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFC, StatusFlags::empty());
    test_case(0x3FE4, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFC, INEXACT);
    test_case(0x3FE8, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFD, StatusFlags::empty());
    test_case(0x3FEC, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFE, INEXACT);
    test_case(0x3FF0, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFE, StatusFlags::empty());
    test_case(0x3FF4, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFE, INEXACT);
    test_case(0x3FF8, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFF, StatusFlags::empty());
    test_case(0x3FFC, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C00, INEXACT);
    test_case(0x4000, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C00, StatusFlags::empty());
    test_case(0x4004, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C00, INEXACT);
    test_case(0x4008, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C00, INEXACT);
    test_case(0x400C, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C01, INEXACT);
    test_case(0x4010, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C01, StatusFlags::empty());
    test_case(0x4014, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C01, INEXACT);
    test_case(0x4018, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C02, INEXACT);
    test_case(0x401C, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C02, INEXACT);
    test_case(0x4020, -14, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C02, StatusFlags::empty());

    // test the values right around max normal for TiesToEven
    test_case(-0x4010, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x400E, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x400C, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x400A, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x4008, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x4006, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x4004, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x4002, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x4000, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x3FFE, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x3FFC, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x3FFA, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT);
    test_case(-0x3FF8, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, StatusFlags::empty());
    test_case(-0x3FF6, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT);
    test_case(-0x3FF4, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFE, INEXACT);
    test_case(-0x3FF2, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFE, INEXACT);
    test_case(-0x3FF0, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFE, StatusFlags::empty());
    test_case(0x3FF0, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFE, StatusFlags::empty());
    test_case(0x3FF2, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFE, INEXACT);
    test_case(0x3FF4, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFE, INEXACT);
    test_case(0x3FF6, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT);
    test_case(0x3FF8, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, StatusFlags::empty());
    test_case(0x3FFA, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT);
    test_case(0x3FFC, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x3FFE, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x4000, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x4002, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x4004, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x4006, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x4008, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x400A, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x400C, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x400E, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x4010, 2, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);

    // test the values much larger than max normal for TiesToEven
    test_case(-0x1, 20, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(0x1, 20, TiesToEven, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
}

#[test]
#[rustfmt::skip]
fn test_from_real_algebraic_number_toward_zero() {
    // test the values right around zero for TowardZero DefaultIgnoreExactUnderflow BeforeRounding
    test_case(-0x20, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8002, StatusFlags::empty());
    test_case(-0x1C, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x18, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x14, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x10, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8001, StatusFlags::empty());
    test_case(-0xC, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(-0x8, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(-0x4, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(0x0, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0000, StatusFlags::empty());
    test_case(0x4, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0x8, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0xC, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0x10, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0001, StatusFlags::empty());
    test_case(0x14, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x18, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x1C, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x20, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0002, StatusFlags::empty());

    // test the values at the transition between subnormal and normal for TowardZero DefaultIgnoreExactUnderflow BeforeRounding
    test_case(0x3FE0, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FE, StatusFlags::empty());
    test_case(0x3FE2, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE4, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE6, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE8, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEA, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEC, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEE, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FF0, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, StatusFlags::empty());
    test_case(0x3FF2, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF4, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF6, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF8, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FFA, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FFC, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FFE, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x4000, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, StatusFlags::empty());
    test_case(0x4002, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4004, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4006, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4008, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x400A, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x400C, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x400E, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4010, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, StatusFlags::empty());
    test_case(0x4012, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4014, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4016, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4018, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x401A, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x401C, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x401E, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4020, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0402, StatusFlags::empty());
    test_case(-0x4020, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8402, StatusFlags::empty());
    test_case(-0x401E, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x401C, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x401A, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4018, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4016, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4014, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4012, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4010, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, StatusFlags::empty());
    test_case(-0x400E, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x400C, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x400A, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4008, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4006, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4004, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4002, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4000, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, StatusFlags::empty());
    test_case(-0x3FFE, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FFC, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FFA, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF8, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF6, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF4, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF2, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF0, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, StatusFlags::empty());
    test_case(-0x3FEE, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FEC, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FEA, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE8, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE6, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE4, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE2, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE0, -28, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FE, StatusFlags::empty());

    // test the values right around zero for TowardZero DefaultSignalExactUnderflow BeforeRounding
    test_case(-0x20, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x8002, UNDERFLOW);
    test_case(-0x1C, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x18, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x14, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x10, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x8001, UNDERFLOW);
    test_case(-0xC, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(-0x8, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(-0x4, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(0x0, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x0000, StatusFlags::empty());
    test_case(0x4, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0x8, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0xC, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0x10, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x0001, UNDERFLOW);
    test_case(0x14, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x18, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x1C, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x20, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x0002, UNDERFLOW);

    // test the values at the transition between subnormal and normal for TowardZero DefaultSignalExactUnderflow BeforeRounding
    test_case(0x3FE0, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x03FE, UNDERFLOW);
    test_case(0x3FE2, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE4, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE6, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE8, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEA, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEC, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEE, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FF0, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, UNDERFLOW);
    test_case(0x3FF2, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF4, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF6, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF8, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FFA, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FFC, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FFE, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x4000, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, StatusFlags::empty());
    test_case(0x4002, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4004, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4006, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4008, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x400A, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x400C, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x400E, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4010, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, StatusFlags::empty());
    test_case(0x4012, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4014, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4016, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4018, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x401A, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x401C, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x401E, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4020, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x0402, StatusFlags::empty());
    test_case(-0x4020, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x8402, StatusFlags::empty());
    test_case(-0x401E, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x401C, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x401A, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4018, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4016, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4014, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4012, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4010, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, StatusFlags::empty());
    test_case(-0x400E, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x400C, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x400A, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4008, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4006, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4004, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4002, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4000, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, StatusFlags::empty());
    test_case(-0x3FFE, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FFC, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FFA, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF8, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF6, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF4, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF2, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF0, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, UNDERFLOW);
    test_case(-0x3FEE, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FEC, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FEA, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE8, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE6, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE4, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE2, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE0, -28, TowardZero, DefaultSignalExactUnderflow, BeforeRounding, 0x83FE, UNDERFLOW);

    // test the values right around zero for TowardZero DefaultIgnoreExactUnderflow AfterRounding
    test_case(-0x20, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x8002, StatusFlags::empty());
    test_case(-0x1C, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x18, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x14, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x10, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x8001, StatusFlags::empty());
    test_case(-0xC, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(-0x8, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(-0x4, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(0x0, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x0000, StatusFlags::empty());
    test_case(0x4, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0x8, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0xC, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0x10, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x0001, StatusFlags::empty());
    test_case(0x14, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x18, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x1C, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x20, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x0002, StatusFlags::empty());

    // test the values at the transition between subnormal and normal for TowardZero DefaultIgnoreExactUnderflow AfterRounding
    test_case(0x3FE0, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FE, StatusFlags::empty());
    test_case(0x3FE2, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE4, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE6, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE8, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEA, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEC, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEE, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FF0, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, StatusFlags::empty());
    test_case(0x3FF2, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF4, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF6, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF8, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FFA, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FFC, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FFE, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x4000, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, StatusFlags::empty());
    test_case(0x4002, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4004, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4006, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4008, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x400A, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x400C, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x400E, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4010, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, StatusFlags::empty());
    test_case(0x4012, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4014, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4016, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4018, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x401A, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x401C, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x401E, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4020, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x0402, StatusFlags::empty());
    test_case(-0x4020, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x8402, StatusFlags::empty());
    test_case(-0x401E, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x401C, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x401A, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4018, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4016, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4014, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4012, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4010, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, StatusFlags::empty());
    test_case(-0x400E, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x400C, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x400A, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4008, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4006, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4004, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4002, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4000, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, StatusFlags::empty());
    test_case(-0x3FFE, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FFC, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FFA, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF8, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF6, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF4, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF2, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF0, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, StatusFlags::empty());
    test_case(-0x3FEE, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FEC, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FEA, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE8, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE6, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE4, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE2, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE0, -28, TowardZero, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FE, StatusFlags::empty());

    // test the values right around zero for TowardZero DefaultSignalExactUnderflow AfterRounding
    test_case(-0x20, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x8002, UNDERFLOW);
    test_case(-0x1C, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x18, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x14, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x10, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x8001, UNDERFLOW);
    test_case(-0xC, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(-0x8, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(-0x4, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(0x0, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x0000, StatusFlags::empty());
    test_case(0x4, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0x8, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0xC, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0x10, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x0001, UNDERFLOW);
    test_case(0x14, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x18, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x1C, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x20, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x0002, UNDERFLOW);

    // test the values at the transition between subnormal and normal for TowardZero DefaultSignalExactUnderflow AfterRounding
    test_case(0x3FE0, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x03FE, UNDERFLOW);
    test_case(0x3FE2, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE4, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE6, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE8, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEA, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEC, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEE, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FF0, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, UNDERFLOW);
    test_case(0x3FF2, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF4, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF6, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF8, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FFA, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FFC, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FFE, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x4000, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x0400, StatusFlags::empty());
    test_case(0x4002, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4004, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4006, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4008, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x400A, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x400C, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x400E, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4010, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x0401, StatusFlags::empty());
    test_case(0x4012, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4014, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4016, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4018, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x401A, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x401C, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x401E, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4020, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x0402, StatusFlags::empty());
    test_case(-0x4020, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x8402, StatusFlags::empty());
    test_case(-0x401E, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x401C, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x401A, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4018, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4016, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4014, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4012, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4010, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x8401, StatusFlags::empty());
    test_case(-0x400E, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x400C, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x400A, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4008, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4006, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4004, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4002, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4000, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x8400, StatusFlags::empty());
    test_case(-0x3FFE, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FFC, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FFA, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF8, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF6, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF4, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF2, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF0, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, UNDERFLOW);
    test_case(-0x3FEE, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FEC, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FEA, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE8, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE6, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE4, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE2, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE0, -28, TowardZero, DefaultSignalExactUnderflow, AfterRounding, 0x83FE, UNDERFLOW);

    // test the values right around 1 and -1 for TowardZero
    test_case(-0x4020, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC02, StatusFlags::empty());
    test_case(-0x401C, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC01, INEXACT);
    test_case(-0x4018, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC01, INEXACT);
    test_case(-0x4014, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC01, INEXACT);
    test_case(-0x4010, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC01, StatusFlags::empty());
    test_case(-0x400C, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC00, INEXACT);
    test_case(-0x4008, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC00, INEXACT);
    test_case(-0x4004, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC00, INEXACT);
    test_case(-0x4000, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC00, StatusFlags::empty());
    test_case(-0x3FFC, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFF, INEXACT);
    test_case(-0x3FF8, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFF, StatusFlags::empty());
    test_case(-0x3FF4, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFE, INEXACT);
    test_case(-0x3FF0, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFE, StatusFlags::empty());
    test_case(-0x3FEC, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFD, INEXACT);
    test_case(-0x3FE8, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFD, StatusFlags::empty());
    test_case(-0x3FE4, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFC, INEXACT);
    test_case(-0x3FE0, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFC, StatusFlags::empty());
    test_case(0x3FE0, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFC, StatusFlags::empty());
    test_case(0x3FE4, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFC, INEXACT);
    test_case(0x3FE8, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFD, StatusFlags::empty());
    test_case(0x3FEC, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFD, INEXACT);
    test_case(0x3FF0, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFE, StatusFlags::empty());
    test_case(0x3FF4, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFE, INEXACT);
    test_case(0x3FF8, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFF, StatusFlags::empty());
    test_case(0x3FFC, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFF, INEXACT);
    test_case(0x4000, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C00, StatusFlags::empty());
    test_case(0x4004, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C00, INEXACT);
    test_case(0x4008, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C00, INEXACT);
    test_case(0x400C, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C00, INEXACT);
    test_case(0x4010, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C01, StatusFlags::empty());
    test_case(0x4014, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C01, INEXACT);
    test_case(0x4018, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C01, INEXACT);
    test_case(0x401C, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C01, INEXACT);
    test_case(0x4020, -14, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C02, StatusFlags::empty());

    // test the values right around max normal for TowardZero
    test_case(-0x4010, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT | OVERFLOW);
    test_case(-0x400E, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT | OVERFLOW);
    test_case(-0x400C, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT | OVERFLOW);
    test_case(-0x400A, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT | OVERFLOW);
    test_case(-0x4008, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT | OVERFLOW);
    test_case(-0x4006, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT | OVERFLOW);
    test_case(-0x4004, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT | OVERFLOW);
    test_case(-0x4002, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT | OVERFLOW);
    test_case(-0x4000, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT | OVERFLOW);
    test_case(-0x3FFE, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT);
    test_case(-0x3FFC, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT);
    test_case(-0x3FFA, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT);
    test_case(-0x3FF8, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, StatusFlags::empty());
    test_case(-0x3FF6, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFE, INEXACT);
    test_case(-0x3FF4, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFE, INEXACT);
    test_case(-0x3FF2, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFE, INEXACT);
    test_case(-0x3FF0, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFE, StatusFlags::empty());
    test_case(0x3FF0, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFE, StatusFlags::empty());
    test_case(0x3FF2, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFE, INEXACT);
    test_case(0x3FF4, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFE, INEXACT);
    test_case(0x3FF6, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFE, INEXACT);
    test_case(0x3FF8, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, StatusFlags::empty());
    test_case(0x3FFA, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT);
    test_case(0x3FFC, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT);
    test_case(0x3FFE, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT);
    test_case(0x4000, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT | OVERFLOW);
    test_case(0x4002, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT | OVERFLOW);
    test_case(0x4004, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT | OVERFLOW);
    test_case(0x4006, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT | OVERFLOW);
    test_case(0x4008, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT | OVERFLOW);
    test_case(0x400A, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT | OVERFLOW);
    test_case(0x400C, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT | OVERFLOW);
    test_case(0x400E, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT | OVERFLOW);
    test_case(0x4010, 2, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT | OVERFLOW);

    // test the values much larger than max normal for TowardZero
    test_case(-0x1, 20, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT | OVERFLOW);
    test_case(0x1, 20, TowardZero, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT | OVERFLOW);
}

#[test]
#[rustfmt::skip]
fn test_from_real_algebraic_number_toward_negative() {
    // test the values right around zero for TowardNegative DefaultIgnoreExactUnderflow BeforeRounding
    test_case(-0x20, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8002, StatusFlags::empty());
    test_case(-0x1C, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x18, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x14, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x10, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8001, StatusFlags::empty());
    test_case(-0xC, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x8, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x4, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(0x0, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0000, StatusFlags::empty());
    test_case(0x4, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0x8, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0xC, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0x10, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0001, StatusFlags::empty());
    test_case(0x14, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x18, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x1C, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x20, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0002, StatusFlags::empty());

    // test the values at the transition between subnormal and normal for TowardNegative DefaultIgnoreExactUnderflow BeforeRounding
    test_case(0x3FE0, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FE, StatusFlags::empty());
    test_case(0x3FE2, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE4, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE6, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE8, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEA, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEC, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEE, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FF0, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, StatusFlags::empty());
    test_case(0x3FF2, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF4, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF6, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF8, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FFA, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FFC, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FFE, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x4000, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, StatusFlags::empty());
    test_case(0x4002, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4004, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4006, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4008, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x400A, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x400C, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x400E, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4010, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, StatusFlags::empty());
    test_case(0x4012, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4014, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4016, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4018, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x401A, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x401C, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x401E, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4020, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0402, StatusFlags::empty());
    test_case(-0x4020, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8402, StatusFlags::empty());
    test_case(-0x401E, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x401C, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x401A, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x4018, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x4016, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x4014, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x4012, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x4010, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, StatusFlags::empty());
    test_case(-0x400E, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x400C, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x400A, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4008, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4006, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4004, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4002, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4000, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, StatusFlags::empty());
    test_case(-0x3FFE, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FFC, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FFA, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF8, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF6, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF4, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF2, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF0, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, StatusFlags::empty());
    test_case(-0x3FEE, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FEC, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FEA, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE8, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE6, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE4, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE2, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE0, -28, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FE, StatusFlags::empty());

    // test the values right around zero for TowardNegative DefaultSignalExactUnderflow BeforeRounding
    test_case(-0x20, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8002, UNDERFLOW);
    test_case(-0x1C, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x18, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x14, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x10, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8001, UNDERFLOW);
    test_case(-0xC, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x8, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x4, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(0x0, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x0000, StatusFlags::empty());
    test_case(0x4, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0x8, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0xC, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0x10, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x0001, UNDERFLOW);
    test_case(0x14, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x18, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x1C, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x20, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x0002, UNDERFLOW);

    // test the values at the transition between subnormal and normal for TowardNegative DefaultSignalExactUnderflow BeforeRounding
    test_case(0x3FE0, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x03FE, UNDERFLOW);
    test_case(0x3FE2, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE4, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE6, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE8, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEA, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEC, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEE, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FF0, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, UNDERFLOW);
    test_case(0x3FF2, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF4, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF6, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF8, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FFA, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FFC, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FFE, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x4000, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, StatusFlags::empty());
    test_case(0x4002, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4004, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4006, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4008, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x400A, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x400C, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x400E, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4010, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, StatusFlags::empty());
    test_case(0x4012, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4014, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4016, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4018, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x401A, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x401C, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x401E, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4020, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x0402, StatusFlags::empty());
    test_case(-0x4020, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8402, StatusFlags::empty());
    test_case(-0x401E, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x401C, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x401A, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x4018, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x4016, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x4014, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x4012, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x4010, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, StatusFlags::empty());
    test_case(-0x400E, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x400C, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x400A, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4008, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4006, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4004, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4002, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4000, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, StatusFlags::empty());
    test_case(-0x3FFE, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FFC, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FFA, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF8, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF6, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF4, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF2, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF0, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, UNDERFLOW);
    test_case(-0x3FEE, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FEC, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FEA, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE8, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE6, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE4, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE2, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE0, -28, TowardNegative, DefaultSignalExactUnderflow, BeforeRounding, 0x83FE, UNDERFLOW);

    // test the values right around zero for TowardNegative DefaultIgnoreExactUnderflow AfterRounding
    test_case(-0x20, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8002, StatusFlags::empty());
    test_case(-0x1C, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x18, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x14, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x10, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8001, StatusFlags::empty());
    test_case(-0xC, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x8, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x4, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(0x0, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x0000, StatusFlags::empty());
    test_case(0x4, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0x8, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0xC, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0x10, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x0001, StatusFlags::empty());
    test_case(0x14, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x18, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x1C, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x20, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x0002, StatusFlags::empty());

    // test the values at the transition between subnormal and normal for TowardNegative DefaultIgnoreExactUnderflow AfterRounding
    test_case(0x3FE0, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FE, StatusFlags::empty());
    test_case(0x3FE2, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE4, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE6, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE8, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEA, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEC, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEE, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FF0, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, StatusFlags::empty());
    test_case(0x3FF2, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF4, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF6, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF8, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FFA, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FFC, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FFE, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x4000, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, StatusFlags::empty());
    test_case(0x4002, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4004, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4006, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4008, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x400A, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x400C, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x400E, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4010, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, StatusFlags::empty());
    test_case(0x4012, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4014, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4016, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4018, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x401A, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x401C, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x401E, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4020, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x0402, StatusFlags::empty());
    test_case(-0x4020, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8402, StatusFlags::empty());
    test_case(-0x401E, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x401C, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x401A, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x4018, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x4016, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x4014, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x4012, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x4010, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, StatusFlags::empty());
    test_case(-0x400E, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x400C, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x400A, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4008, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4006, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4004, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4002, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4000, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, StatusFlags::empty());
    test_case(-0x3FFE, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x3FFC, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x3FFA, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x3FF8, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF6, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF4, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF2, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF0, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, StatusFlags::empty());
    test_case(-0x3FEE, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FEC, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FEA, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE8, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE6, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE4, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE2, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE0, -28, TowardNegative, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FE, StatusFlags::empty());

    // test the values right around zero for TowardNegative DefaultSignalExactUnderflow AfterRounding
    test_case(-0x20, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8002, UNDERFLOW);
    test_case(-0x1C, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x18, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x14, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x10, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8001, UNDERFLOW);
    test_case(-0xC, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x8, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x4, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(0x0, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x0000, StatusFlags::empty());
    test_case(0x4, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0x8, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0xC, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0x10, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x0001, UNDERFLOW);
    test_case(0x14, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x18, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x1C, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x20, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x0002, UNDERFLOW);

    // test the values at the transition between subnormal and normal for TowardNegative DefaultSignalExactUnderflow AfterRounding
    test_case(0x3FE0, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x03FE, UNDERFLOW);
    test_case(0x3FE2, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE4, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE6, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE8, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEA, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEC, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FEE, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FF0, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, UNDERFLOW);
    test_case(0x3FF2, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF4, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF6, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF8, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FFA, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FFC, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FFE, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x4000, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x0400, StatusFlags::empty());
    test_case(0x4002, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4004, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4006, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4008, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x400A, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x400C, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x400E, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4010, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x0401, StatusFlags::empty());
    test_case(0x4012, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4014, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4016, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4018, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x401A, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x401C, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x401E, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4020, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x0402, StatusFlags::empty());
    test_case(-0x4020, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8402, StatusFlags::empty());
    test_case(-0x401E, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x401C, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x401A, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x4018, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x4016, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x4014, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x4012, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x4010, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8401, StatusFlags::empty());
    test_case(-0x400E, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x400C, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x400A, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4008, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4006, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4004, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4002, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4000, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8400, StatusFlags::empty());
    test_case(-0x3FFE, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x3FFC, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x3FFA, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x3FF8, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF6, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF4, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF2, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF0, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, UNDERFLOW);
    test_case(-0x3FEE, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FEC, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FEA, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE8, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE6, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE4, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE2, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE0, -28, TowardNegative, DefaultSignalExactUnderflow, AfterRounding, 0x83FE, UNDERFLOW);

    // test the values right around 1 and -1 for TowardNegative
    test_case(-0x4020, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC02, StatusFlags::empty());
    test_case(-0x401C, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC02, INEXACT);
    test_case(-0x4018, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC02, INEXACT);
    test_case(-0x4014, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC02, INEXACT);
    test_case(-0x4010, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC01, StatusFlags::empty());
    test_case(-0x400C, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC01, INEXACT);
    test_case(-0x4008, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC01, INEXACT);
    test_case(-0x4004, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC01, INEXACT);
    test_case(-0x4000, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC00, StatusFlags::empty());
    test_case(-0x3FFC, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC00, INEXACT);
    test_case(-0x3FF8, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFF, StatusFlags::empty());
    test_case(-0x3FF4, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFF, INEXACT);
    test_case(-0x3FF0, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFE, StatusFlags::empty());
    test_case(-0x3FEC, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFE, INEXACT);
    test_case(-0x3FE8, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFD, StatusFlags::empty());
    test_case(-0x3FE4, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFD, INEXACT);
    test_case(-0x3FE0, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFC, StatusFlags::empty());
    test_case(0x3FE0, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFC, StatusFlags::empty());
    test_case(0x3FE4, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFC, INEXACT);
    test_case(0x3FE8, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFD, StatusFlags::empty());
    test_case(0x3FEC, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFD, INEXACT);
    test_case(0x3FF0, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFE, StatusFlags::empty());
    test_case(0x3FF4, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFE, INEXACT);
    test_case(0x3FF8, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFF, StatusFlags::empty());
    test_case(0x3FFC, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFF, INEXACT);
    test_case(0x4000, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C00, StatusFlags::empty());
    test_case(0x4004, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C00, INEXACT);
    test_case(0x4008, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C00, INEXACT);
    test_case(0x400C, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C00, INEXACT);
    test_case(0x4010, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C01, StatusFlags::empty());
    test_case(0x4014, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C01, INEXACT);
    test_case(0x4018, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C01, INEXACT);
    test_case(0x401C, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C01, INEXACT);
    test_case(0x4020, -14, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C02, StatusFlags::empty());

    // test the values right around max normal for TowardNegative
    test_case(-0x4010, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x400E, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x400C, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x400A, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x4008, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x4006, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x4004, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x4002, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x4000, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x3FFE, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x3FFC, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x3FFA, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x3FF8, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, StatusFlags::empty());
    test_case(-0x3FF6, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT);
    test_case(-0x3FF4, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT);
    test_case(-0x3FF2, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT);
    test_case(-0x3FF0, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFE, StatusFlags::empty());
    test_case(0x3FF0, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFE, StatusFlags::empty());
    test_case(0x3FF2, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFE, INEXACT);
    test_case(0x3FF4, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFE, INEXACT);
    test_case(0x3FF6, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFE, INEXACT);
    test_case(0x3FF8, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, StatusFlags::empty());
    test_case(0x3FFA, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT);
    test_case(0x3FFC, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT);
    test_case(0x3FFE, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT);
    test_case(0x4000, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT | OVERFLOW);
    test_case(0x4002, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT | OVERFLOW);
    test_case(0x4004, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT | OVERFLOW);
    test_case(0x4006, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT | OVERFLOW);
    test_case(0x4008, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT | OVERFLOW);
    test_case(0x400A, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT | OVERFLOW);
    test_case(0x400C, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT | OVERFLOW);
    test_case(0x400E, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT | OVERFLOW);
    test_case(0x4010, 2, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT | OVERFLOW);

    // test the values much larger than max normal for TowardNegative
    test_case(-0x1, 20, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(0x1, 20, TowardNegative, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT | OVERFLOW);
}

#[test]
#[rustfmt::skip]
fn test_from_real_algebraic_number_toward_positive() {
    // test the values right around zero for TowardPositive DefaultIgnoreExactUnderflow BeforeRounding
    test_case(-0x20, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8002, StatusFlags::empty());
    test_case(-0x1C, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x18, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x14, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x10, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8001, StatusFlags::empty());
    test_case(-0xC, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(-0x8, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(-0x4, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(0x0, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0000, StatusFlags::empty());
    test_case(0x4, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x8, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0xC, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x10, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0001, StatusFlags::empty());
    test_case(0x14, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x18, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x1C, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x20, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0002, StatusFlags::empty());

    // test the values at the transition between subnormal and normal for TowardPositive DefaultIgnoreExactUnderflow BeforeRounding
    test_case(0x3FE0, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FE, StatusFlags::empty());
    test_case(0x3FE2, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FE4, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FE6, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FE8, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEA, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEC, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEE, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF0, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, StatusFlags::empty());
    test_case(0x3FF2, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FF4, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FF6, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FF8, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFA, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFC, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFE, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x4000, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, StatusFlags::empty());
    test_case(0x4002, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4004, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4006, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4008, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x400A, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x400C, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x400E, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4010, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, StatusFlags::empty());
    test_case(0x4012, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x4014, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x4016, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x4018, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x401A, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x401C, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x401E, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x4020, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0402, StatusFlags::empty());
    test_case(-0x4020, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8402, StatusFlags::empty());
    test_case(-0x401E, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x401C, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x401A, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4018, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4016, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4014, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4012, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4010, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, StatusFlags::empty());
    test_case(-0x400E, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x400C, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x400A, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4008, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4006, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4004, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4002, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4000, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, StatusFlags::empty());
    test_case(-0x3FFE, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FFC, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FFA, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF8, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF6, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF4, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF2, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF0, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, StatusFlags::empty());
    test_case(-0x3FEE, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FEC, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FEA, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE8, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE6, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE4, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE2, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE0, -28, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FE, StatusFlags::empty());

    // test the values right around zero for TowardPositive DefaultSignalExactUnderflow BeforeRounding
    test_case(-0x20, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x8002, UNDERFLOW);
    test_case(-0x1C, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x18, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x14, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x10, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x8001, UNDERFLOW);
    test_case(-0xC, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(-0x8, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(-0x4, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(0x0, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0000, StatusFlags::empty());
    test_case(0x4, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x8, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0xC, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x10, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0001, UNDERFLOW);
    test_case(0x14, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x18, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x1C, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x20, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0002, UNDERFLOW);

    // test the values at the transition between subnormal and normal for TowardPositive DefaultSignalExactUnderflow BeforeRounding
    test_case(0x3FE0, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x03FE, UNDERFLOW);
    test_case(0x3FE2, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FE4, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FE6, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FE8, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEA, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEC, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEE, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF0, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, UNDERFLOW);
    test_case(0x3FF2, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FF4, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FF6, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FF8, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFA, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFC, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFE, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x4000, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, StatusFlags::empty());
    test_case(0x4002, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4004, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4006, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4008, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x400A, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x400C, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x400E, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4010, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, StatusFlags::empty());
    test_case(0x4012, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x4014, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x4016, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x4018, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x401A, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x401C, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x401E, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x4020, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x0402, StatusFlags::empty());
    test_case(-0x4020, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x8402, StatusFlags::empty());
    test_case(-0x401E, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x401C, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x401A, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4018, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4016, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4014, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4012, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4010, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, StatusFlags::empty());
    test_case(-0x400E, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x400C, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x400A, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4008, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4006, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4004, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4002, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4000, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, StatusFlags::empty());
    test_case(-0x3FFE, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FFC, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FFA, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF8, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF6, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF4, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF2, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF0, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, UNDERFLOW);
    test_case(-0x3FEE, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FEC, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FEA, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE8, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE6, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE4, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE2, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE0, -28, TowardPositive, DefaultSignalExactUnderflow, BeforeRounding, 0x83FE, UNDERFLOW);

    // test the values right around zero for TowardPositive DefaultIgnoreExactUnderflow AfterRounding
    test_case(-0x20, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x8002, StatusFlags::empty());
    test_case(-0x1C, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x18, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x14, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x10, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x8001, StatusFlags::empty());
    test_case(-0xC, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(-0x8, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(-0x4, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(0x0, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0000, StatusFlags::empty());
    test_case(0x4, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x8, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0xC, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x10, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0001, StatusFlags::empty());
    test_case(0x14, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x18, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x1C, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x20, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0002, StatusFlags::empty());

    // test the values at the transition between subnormal and normal for TowardPositive DefaultIgnoreExactUnderflow AfterRounding
    test_case(0x3FE0, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FE, StatusFlags::empty());
    test_case(0x3FE2, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FE4, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FE6, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FE8, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEA, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEC, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEE, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF0, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, StatusFlags::empty());
    test_case(0x3FF2, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FF4, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FF6, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FF8, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFA, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x3FFC, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x3FFE, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4000, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, StatusFlags::empty());
    test_case(0x4002, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4004, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4006, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4008, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x400A, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x400C, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x400E, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4010, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, StatusFlags::empty());
    test_case(0x4012, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x4014, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x4016, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x4018, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x401A, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x401C, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x401E, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x4020, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x0402, StatusFlags::empty());
    test_case(-0x4020, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x8402, StatusFlags::empty());
    test_case(-0x401E, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x401C, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x401A, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4018, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4016, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4014, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4012, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4010, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, StatusFlags::empty());
    test_case(-0x400E, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x400C, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x400A, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4008, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4006, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4004, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4002, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4000, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, StatusFlags::empty());
    test_case(-0x3FFE, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FFC, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FFA, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF8, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF6, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF4, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF2, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF0, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, StatusFlags::empty());
    test_case(-0x3FEE, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FEC, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FEA, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE8, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE6, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE4, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE2, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE0, -28, TowardPositive, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FE, StatusFlags::empty());

    // test the values right around zero for TowardPositive DefaultSignalExactUnderflow AfterRounding
    test_case(-0x20, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x8002, UNDERFLOW);
    test_case(-0x1C, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x18, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x14, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x10, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x8001, UNDERFLOW);
    test_case(-0xC, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(-0x8, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(-0x4, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(0x0, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0000, StatusFlags::empty());
    test_case(0x4, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x8, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0xC, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x10, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0001, UNDERFLOW);
    test_case(0x14, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x18, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x1C, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x20, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0002, UNDERFLOW);

    // test the values at the transition between subnormal and normal for TowardPositive DefaultSignalExactUnderflow AfterRounding
    test_case(0x3FE0, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x03FE, UNDERFLOW);
    test_case(0x3FE2, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FE4, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FE6, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FE8, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEA, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEC, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEE, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF0, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, UNDERFLOW);
    test_case(0x3FF2, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FF4, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FF6, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FF8, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFA, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x3FFC, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x3FFE, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4000, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0400, StatusFlags::empty());
    test_case(0x4002, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4004, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4006, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4008, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x400A, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x400C, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x400E, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4010, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0401, StatusFlags::empty());
    test_case(0x4012, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x4014, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x4016, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x4018, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x401A, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x401C, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x401E, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x4020, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x0402, StatusFlags::empty());
    test_case(-0x4020, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x8402, StatusFlags::empty());
    test_case(-0x401E, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x401C, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x401A, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4018, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4016, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4014, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4012, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4010, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x8401, StatusFlags::empty());
    test_case(-0x400E, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x400C, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x400A, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4008, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4006, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4004, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4002, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4000, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x8400, StatusFlags::empty());
    test_case(-0x3FFE, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FFC, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FFA, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF8, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF6, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF4, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF2, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF0, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, UNDERFLOW);
    test_case(-0x3FEE, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FEC, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FEA, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE8, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE6, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE4, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE2, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE0, -28, TowardPositive, DefaultSignalExactUnderflow, AfterRounding, 0x83FE, UNDERFLOW);

    // test the values right around 1 and -1 for TowardPositive
    test_case(-0x4020, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC02, StatusFlags::empty());
    test_case(-0x401C, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC01, INEXACT);
    test_case(-0x4018, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC01, INEXACT);
    test_case(-0x4014, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC01, INEXACT);
    test_case(-0x4010, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC01, StatusFlags::empty());
    test_case(-0x400C, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC00, INEXACT);
    test_case(-0x4008, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC00, INEXACT);
    test_case(-0x4004, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC00, INEXACT);
    test_case(-0x4000, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC00, StatusFlags::empty());
    test_case(-0x3FFC, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFF, INEXACT);
    test_case(-0x3FF8, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFF, StatusFlags::empty());
    test_case(-0x3FF4, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFE, INEXACT);
    test_case(-0x3FF0, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFE, StatusFlags::empty());
    test_case(-0x3FEC, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFD, INEXACT);
    test_case(-0x3FE8, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFD, StatusFlags::empty());
    test_case(-0x3FE4, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFC, INEXACT);
    test_case(-0x3FE0, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFC, StatusFlags::empty());
    test_case(0x3FE0, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFC, StatusFlags::empty());
    test_case(0x3FE4, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFD, INEXACT);
    test_case(0x3FE8, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFD, StatusFlags::empty());
    test_case(0x3FEC, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFE, INEXACT);
    test_case(0x3FF0, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFE, StatusFlags::empty());
    test_case(0x3FF4, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFF, INEXACT);
    test_case(0x3FF8, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFF, StatusFlags::empty());
    test_case(0x3FFC, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C00, INEXACT);
    test_case(0x4000, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C00, StatusFlags::empty());
    test_case(0x4004, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C01, INEXACT);
    test_case(0x4008, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C01, INEXACT);
    test_case(0x400C, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C01, INEXACT);
    test_case(0x4010, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C01, StatusFlags::empty());
    test_case(0x4014, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C02, INEXACT);
    test_case(0x4018, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C02, INEXACT);
    test_case(0x401C, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C02, INEXACT);
    test_case(0x4020, -14, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C02, StatusFlags::empty());

    // test the values right around max normal for TowardPositive
    test_case(-0x4010, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT | OVERFLOW);
    test_case(-0x400E, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT | OVERFLOW);
    test_case(-0x400C, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT | OVERFLOW);
    test_case(-0x400A, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT | OVERFLOW);
    test_case(-0x4008, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT | OVERFLOW);
    test_case(-0x4006, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT | OVERFLOW);
    test_case(-0x4004, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT | OVERFLOW);
    test_case(-0x4002, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT | OVERFLOW);
    test_case(-0x4000, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT | OVERFLOW);
    test_case(-0x3FFE, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT);
    test_case(-0x3FFC, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT);
    test_case(-0x3FFA, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT);
    test_case(-0x3FF8, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, StatusFlags::empty());
    test_case(-0x3FF6, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFE, INEXACT);
    test_case(-0x3FF4, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFE, INEXACT);
    test_case(-0x3FF2, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFE, INEXACT);
    test_case(-0x3FF0, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFE, StatusFlags::empty());
    test_case(0x3FF0, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFE, StatusFlags::empty());
    test_case(0x3FF2, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT);
    test_case(0x3FF4, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT);
    test_case(0x3FF6, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT);
    test_case(0x3FF8, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, StatusFlags::empty());
    test_case(0x3FFA, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x3FFC, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x3FFE, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x4000, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x4002, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x4004, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x4006, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x4008, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x400A, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x400C, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x400E, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x4010, 2, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);

    // test the values much larger than max normal for TowardPositive
    test_case(-0x1, 20, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT | OVERFLOW);
    test_case(0x1, 20, TowardPositive, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
}

#[test]
#[rustfmt::skip]
fn test_from_real_algebraic_number_ties_to_away() {
    // test the values right around zero for TiesToAway DefaultIgnoreExactUnderflow BeforeRounding
    test_case(-0x20, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8002, StatusFlags::empty());
    test_case(-0x1C, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x18, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x14, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x10, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8001, StatusFlags::empty());
    test_case(-0xC, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x8, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x4, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(0x0, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0000, StatusFlags::empty());
    test_case(0x4, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0x8, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0xC, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x10, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0001, StatusFlags::empty());
    test_case(0x14, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x18, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x1C, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x20, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0002, StatusFlags::empty());

    // test the values at the transition between subnormal and normal for TiesToAway DefaultIgnoreExactUnderflow BeforeRounding
    test_case(0x3FE0, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FE, StatusFlags::empty());
    test_case(0x3FE2, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE4, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE6, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE8, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEA, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEC, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEE, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF0, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, StatusFlags::empty());
    test_case(0x3FF2, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF4, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF6, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF8, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFA, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFC, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFE, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x4000, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, StatusFlags::empty());
    test_case(0x4002, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4004, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4006, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4008, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x400A, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x400C, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x400E, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4010, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, StatusFlags::empty());
    test_case(0x4012, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4014, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4016, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4018, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x401A, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x401C, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x401E, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x4020, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x0402, StatusFlags::empty());
    test_case(-0x4020, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8402, StatusFlags::empty());
    test_case(-0x401E, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x401C, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x401A, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x4018, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x4016, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4014, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4012, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4010, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, StatusFlags::empty());
    test_case(-0x400E, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x400C, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x400A, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4008, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4006, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4004, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4002, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4000, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, StatusFlags::empty());
    test_case(-0x3FFE, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FFC, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FFA, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF8, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF6, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF4, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF2, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF0, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, StatusFlags::empty());
    test_case(-0x3FEE, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FEC, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FEA, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE8, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE6, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE4, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE2, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE0, -28, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x83FE, StatusFlags::empty());

    // test the values right around zero for TiesToAway DefaultSignalExactUnderflow BeforeRounding
    test_case(-0x20, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8002, UNDERFLOW);
    test_case(-0x1C, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x18, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x14, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x10, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8001, UNDERFLOW);
    test_case(-0xC, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x8, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x4, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(0x0, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0000, StatusFlags::empty());
    test_case(0x4, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0x8, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0xC, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x10, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0001, UNDERFLOW);
    test_case(0x14, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x18, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x1C, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x20, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0002, UNDERFLOW);

    // test the values at the transition between subnormal and normal for TiesToAway DefaultSignalExactUnderflow BeforeRounding
    test_case(0x3FE0, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x03FE, UNDERFLOW);
    test_case(0x3FE2, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE4, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE6, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE8, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEA, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEC, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEE, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF0, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, UNDERFLOW);
    test_case(0x3FF2, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF4, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF6, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF8, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFA, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFC, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFE, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x4000, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, StatusFlags::empty());
    test_case(0x4002, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4004, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4006, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0400, INEXACT);
    test_case(0x4008, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x400A, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x400C, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x400E, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4010, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, StatusFlags::empty());
    test_case(0x4012, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4014, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4016, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0401, INEXACT);
    test_case(0x4018, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x401A, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x401C, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x401E, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0402, INEXACT);
    test_case(0x4020, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x0402, StatusFlags::empty());
    test_case(-0x4020, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8402, StatusFlags::empty());
    test_case(-0x401E, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x401C, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x401A, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x4018, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8402, INEXACT);
    test_case(-0x4016, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4014, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4012, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4010, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, StatusFlags::empty());
    test_case(-0x400E, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x400C, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x400A, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4008, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8401, INEXACT);
    test_case(-0x4006, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4004, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4002, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT);
    test_case(-0x4000, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, StatusFlags::empty());
    test_case(-0x3FFE, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FFC, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FFA, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF8, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF6, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF4, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF2, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF0, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, UNDERFLOW);
    test_case(-0x3FEE, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FEC, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FEA, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE8, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE6, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE4, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE2, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE0, -28, TiesToAway, DefaultSignalExactUnderflow, BeforeRounding, 0x83FE, UNDERFLOW);

    // test the values right around zero for TiesToAway DefaultIgnoreExactUnderflow AfterRounding
    test_case(-0x20, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8002, StatusFlags::empty());
    test_case(-0x1C, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x18, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x14, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x10, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8001, StatusFlags::empty());
    test_case(-0xC, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x8, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x4, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(0x0, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0000, StatusFlags::empty());
    test_case(0x4, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0x8, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0xC, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x10, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0001, StatusFlags::empty());
    test_case(0x14, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x18, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x1C, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x20, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0002, StatusFlags::empty());

    // test the values at the transition between subnormal and normal for TiesToAway DefaultIgnoreExactUnderflow AfterRounding
    test_case(0x3FE0, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FE, StatusFlags::empty());
    test_case(0x3FE2, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE4, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE6, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE8, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEA, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEC, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEE, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF0, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, StatusFlags::empty());
    test_case(0x3FF2, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF4, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF6, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF8, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFA, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFC, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x3FFE, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4000, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, StatusFlags::empty());
    test_case(0x4002, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4004, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4006, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4008, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x400A, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x400C, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x400E, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4010, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, StatusFlags::empty());
    test_case(0x4012, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4014, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4016, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4018, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x401A, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x401C, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x401E, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x4020, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x0402, StatusFlags::empty());
    test_case(-0x4020, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8402, StatusFlags::empty());
    test_case(-0x401E, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x401C, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x401A, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x4018, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x4016, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4014, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4012, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4010, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, StatusFlags::empty());
    test_case(-0x400E, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x400C, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x400A, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4008, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4006, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4004, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4002, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4000, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, StatusFlags::empty());
    test_case(-0x3FFE, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x3FFC, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x3FFA, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF8, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF6, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF4, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF2, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF0, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, StatusFlags::empty());
    test_case(-0x3FEE, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FEC, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FEA, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE8, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE6, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE4, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE2, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE0, -28, TiesToAway, DefaultIgnoreExactUnderflow, AfterRounding, 0x83FE, StatusFlags::empty());

    // test the values right around zero for TiesToAway DefaultSignalExactUnderflow AfterRounding
    test_case(-0x20, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8002, UNDERFLOW);
    test_case(-0x1C, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x18, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8002, INEXACT | UNDERFLOW);
    test_case(-0x14, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x10, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8001, UNDERFLOW);
    test_case(-0xC, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x8, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8001, INEXACT | UNDERFLOW);
    test_case(-0x4, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8000, INEXACT | UNDERFLOW);
    test_case(0x0, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0000, StatusFlags::empty());
    test_case(0x4, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0000, INEXACT | UNDERFLOW);
    test_case(0x8, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0xC, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x10, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0001, UNDERFLOW);
    test_case(0x14, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0001, INEXACT | UNDERFLOW);
    test_case(0x18, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x1C, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0002, INEXACT | UNDERFLOW);
    test_case(0x20, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0002, UNDERFLOW);

    // test the values at the transition between subnormal and normal for TiesToAway DefaultSignalExactUnderflow AfterRounding
    test_case(0x3FE0, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x03FE, UNDERFLOW);
    test_case(0x3FE2, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE4, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE6, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x03FE, INEXACT | UNDERFLOW);
    test_case(0x3FE8, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEA, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEC, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FEE, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF0, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, UNDERFLOW);
    test_case(0x3FF2, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF4, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF6, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x03FF, INEXACT | UNDERFLOW);
    test_case(0x3FF8, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFA, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT | UNDERFLOW);
    test_case(0x3FFC, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x3FFE, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4000, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0400, StatusFlags::empty());
    test_case(0x4002, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4004, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4006, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0400, INEXACT);
    test_case(0x4008, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x400A, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x400C, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x400E, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4010, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0401, StatusFlags::empty());
    test_case(0x4012, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4014, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4016, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0401, INEXACT);
    test_case(0x4018, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x401A, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x401C, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x401E, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0402, INEXACT);
    test_case(0x4020, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x0402, StatusFlags::empty());
    test_case(-0x4020, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8402, StatusFlags::empty());
    test_case(-0x401E, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x401C, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x401A, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x4018, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8402, INEXACT);
    test_case(-0x4016, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4014, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4012, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4010, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8401, StatusFlags::empty());
    test_case(-0x400E, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x400C, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x400A, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4008, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8401, INEXACT);
    test_case(-0x4006, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4004, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4002, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x4000, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8400, StatusFlags::empty());
    test_case(-0x3FFE, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x3FFC, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT);
    test_case(-0x3FFA, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF8, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x8400, INEXACT | UNDERFLOW);
    test_case(-0x3FF6, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF4, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF2, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FF0, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, UNDERFLOW);
    test_case(-0x3FEE, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FEC, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FEA, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE8, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x83FF, INEXACT | UNDERFLOW);
    test_case(-0x3FE6, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE4, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE2, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x83FE, INEXACT | UNDERFLOW);
    test_case(-0x3FE0, -28, TiesToAway, DefaultSignalExactUnderflow, AfterRounding, 0x83FE, UNDERFLOW);

    // test the values right around 1 and -1 for TiesToAway
    test_case(-0x4020, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC02, StatusFlags::empty());
    test_case(-0x401C, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC02, INEXACT);
    test_case(-0x4018, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC02, INEXACT);
    test_case(-0x4014, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC01, INEXACT);
    test_case(-0x4010, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC01, StatusFlags::empty());
    test_case(-0x400C, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC01, INEXACT);
    test_case(-0x4008, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC01, INEXACT);
    test_case(-0x4004, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC00, INEXACT);
    test_case(-0x4000, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC00, StatusFlags::empty());
    test_case(-0x3FFC, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBC00, INEXACT);
    test_case(-0x3FF8, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFF, StatusFlags::empty());
    test_case(-0x3FF4, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFF, INEXACT);
    test_case(-0x3FF0, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFE, StatusFlags::empty());
    test_case(-0x3FEC, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFE, INEXACT);
    test_case(-0x3FE8, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFD, StatusFlags::empty());
    test_case(-0x3FE4, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFD, INEXACT);
    test_case(-0x3FE0, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xBBFC, StatusFlags::empty());
    test_case(0x3FE0, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFC, StatusFlags::empty());
    test_case(0x3FE4, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFD, INEXACT);
    test_case(0x3FE8, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFD, StatusFlags::empty());
    test_case(0x3FEC, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFE, INEXACT);
    test_case(0x3FF0, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFE, StatusFlags::empty());
    test_case(0x3FF4, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFF, INEXACT);
    test_case(0x3FF8, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3BFF, StatusFlags::empty());
    test_case(0x3FFC, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C00, INEXACT);
    test_case(0x4000, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C00, StatusFlags::empty());
    test_case(0x4004, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C00, INEXACT);
    test_case(0x4008, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C01, INEXACT);
    test_case(0x400C, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C01, INEXACT);
    test_case(0x4010, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C01, StatusFlags::empty());
    test_case(0x4014, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C01, INEXACT);
    test_case(0x4018, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C02, INEXACT);
    test_case(0x401C, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C02, INEXACT);
    test_case(0x4020, -14, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x3C02, StatusFlags::empty());

    // test the values right around max normal for TiesToAway
    test_case(-0x4010, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x400E, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x400C, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x400A, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x4008, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x4006, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x4004, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x4002, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x4000, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x3FFE, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x3FFC, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(-0x3FFA, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT);
    test_case(-0x3FF8, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, StatusFlags::empty());
    test_case(-0x3FF6, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT);
    test_case(-0x3FF4, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFF, INEXACT);
    test_case(-0x3FF2, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFE, INEXACT);
    test_case(-0x3FF0, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFBFE, StatusFlags::empty());
    test_case(0x3FF0, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFE, StatusFlags::empty());
    test_case(0x3FF2, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFE, INEXACT);
    test_case(0x3FF4, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT);
    test_case(0x3FF6, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT);
    test_case(0x3FF8, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, StatusFlags::empty());
    test_case(0x3FFA, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7BFF, INEXACT);
    test_case(0x3FFC, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x3FFE, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x4000, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x4002, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x4004, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x4006, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x4008, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x400A, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x400C, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x400E, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
    test_case(0x4010, 2, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);

    // test the values much larger than max normal for TiesToAway
    test_case(-0x1, 20, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0xFC00, INEXACT | OVERFLOW);
    test_case(0x1, 20, TiesToAway, DefaultIgnoreExactUnderflow, BeforeRounding, 0x7C00, INEXACT | OVERFLOW);
}
